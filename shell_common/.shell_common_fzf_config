# File finder with preview for text file
ff(){
	if [ -x "$(command -v batcat)" ]; then
		fzf --preview 'batcat --style=numbers --color=always --line-range :80 {}' 
	else
		fzf --preview 'cat {}' 
			fi
}


# Awesome GIT with FZF
is_in_git_repo() {
	git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
	fzf --height 80% "$@" --border
}

gf() {
	is_in_git_repo || return
	git -c color.status=always status --short |
	fzf -m --ansi --nth 2..,.. \
	--preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
	cut -c4- | sed 's/.* -> //'
}

gb() {
	is_in_git_repo || return
	git branch -a --color=always | grep -v '/HEAD\s' | sort |
	fzf --ansi --multi --tac --preview-window right:70% \
	--preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
	sed 's/^..//' | cut -d' ' -f1 |
	sed 's#^remotes/##'
}

gt() {
	is_in_git_repo || return
	git tag --sort -version:refname |
	fzf --multi --preview-window right:70% \
	--preview 'git show --color=always {} | head -'$LINES
}

gl() {
	is_in_git_repo || return
	git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
	fzf --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
	--header 'Press CTRL-S to toggle sort' \
	--preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
	grep -o "[a-f0-9]\{7,\}"
}

gr() {
	is_in_git_repo || return
	git remote -v | awk '{print $1 "\t" $2}' | uniq |
	fzf --tac \
	--preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
	cut -d$'\t' -f1
}

if [ -n "$BASH_VERSION" ]; then
	bind '"\er": redraw-current-line'
	bind '"\C-g\C-f": "$(_gf)\e\C-e\er"'
	bind '"\C-g\C-b": "$(_gb)\e\C-e\er"'
	bind '"\C-g\C-t": "$(_gt)\e\C-e\er"'
	bind '"\C-g\C-h": "$(_gl)\e\C-e\er"'
	bind '"\C-g\C-r": "$(_gr)\e\C-e\er"'
elif [ -n "$ZSH_VERSION" ]; then
	join-lines() {
		local item
		while read item; do
			echo -n "${(q)item} "
		done
	}
	bind-git-helper() {
		local c
		for c in $@; do
			eval "fzf-g$c-widget() { local result=\$(_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
			eval "zle -N fzf-g$c-widget"
			eval "bindkey '^g^$c' fzf-g$c-widget"
		done
	}
	bind-git-helper f b t l r
	unset -f bind-git-helper
fi

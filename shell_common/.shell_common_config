# BASE16-Shell Entry : Helps in getting even color scheme in zsh, bash and nvim
BASE16_SHELL=$HOME/.local/share/shell_common/base16-shell/
[ -n "$PS1" ] && [ -s "$BASE16_SHELL/profile_helper.sh" ] && eval "$("$BASE16_SHELL/profile_helper.sh")"

# unicode support in tmux
alias tmux='tmux -u'
# tmux aliases
alias ta='tmux -u attach -d'
alias tls='tmux -u ls'
alias tat='tmux -u attach -d -t'
alias tns='tmux -u new-session -s'

function define
{
	sdcv $1 | less -s
}

function present
{
	echo "Starting Projecteur"
	projecteur &
	echo "Starting Presentation"
	pdfpc $1 $@
	echo "Killing Projecteur"
	sleep 1s
	projecteur -c quit
}

function add_to_path
{
	priv_bin_path="$1"
	if [ -d "${priv_bin_path}" ] ; then
		if ! printf '%s' ":${PATH-}:" | grep -Fq ":${priv_bin_path-}:"; then
			PATH="${priv_bin_path-}:${PATH-}"
		fi
	fi

}

# Enable compression in ccache
export CCACHE_COMPRESS=1

# Add npm binaries to PATH
add_to_path "$HOME/.npm_packages/bin"

# set PATH so it includes user's private bin if it exists
add_to_path "$HOME/.local/bin"
add_to_path "$HOME/bin"

GPG_TTY=$(tty)
export GPG_TTY

# -- Improved X11 forwarding through GNU Screen (or tmux).
# If not in screen or tmux, update the DISPLAY cache.
# If we are, update the value of DISPLAY to be that in the cache.
function update-x11-forwarding
{
    if [ -z "$STY" ] && [ -z "$TMUX" ]; then
        echo "$DISPLAY" > "$HOME/.display.txt"
    else
		DISPLAY="$(cat $HOME/.display.txt)"
        export DISPLAY
    fi
}

# This is run before every command.
preexec() {
    # Don't cause a preexec for PROMPT_COMMAND.
    # Beware!  This fails if PROMPT_COMMAND is a string containing more than one command.
    [ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return 

    update-x11-forwarding

    # Debugging.
    #echo DISPLAY = $DISPLAY, display.txt = `cat ~/.display.txt`, STY = $STY, TMUX = $TMUX  
}
trap 'preexec' DEBUG


# cheatsheets location and autocompletion
export EDITOR=nvim
if [ -n "$BASH_VERSION" ]; then
  function _eg_autocomplete {
    cheatsheets="$(eg -l | cut -d' ' -f1)"
    COMPREPLY=()
    if [ $COMP_CWORD = 1 ]; then
	COMPREPLY=(`compgen -W "$cheatsheets" -- $2`)
    fi
  }

  complete -F _eg_autocomplete eg

elif [ -n "$ZSH_VERSION" ]; then
  function _eg_autocomplete {
    local cheatsheets
    cheatsheets="$(eg -l | cut -d' ' -f1)"
    reply=( "${(ps:\n:)cheatsheets}" )
  }

  compctl -K _eg_autocomplete eg
fi

# direnv support
MYSHELL=`ps -hp $$|awk '{print $5}'`
eval "$(direnv hook $MYSHELL)"

# Some python specific commands
source ~/.shell_common_python_config
